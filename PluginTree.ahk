#Requires AutoHotkey v2.0
#SingleInstance Force
#Include <Apparition\String>
#Include <Apparition\Num>
#Include <Apparition\File>
;; |||TODO|||
    ;;-||Document|| How to use the "AnimusHK project" system.

    ;;-||Maybe?||
        ;;?-|New-Args| Add flags to allow specifying things like when to make a "_submods.ahk" (instead of only--and alwyas--doing so at the top level), and maybe to select alternative file extensions to include.
        ;;?-|Refactor|
            ;;?+ Compartmentalize: Structure to polute the global namespace less. Either with classes or nested functions.

GenPluginTree(PluginDir, MakeSubmods := true, Manifest := "", _lvl:=0) {
  Manifest := ManifestName(PluginDir, Manifest)
  
  OldDir := A_WorkingDir
  SetWorkingDir PluginDir
  {
    formatInclude(path, indent := 1) {
      return "#include ".Indent(indent, "  ") . path . "`n"
    }
    contents := ""
    Loop Files, "*.ahk" {
      If SubStr(A_LoopFileName, 1, 1) != "_" {
        if A_LoopFilePath != Manifest
          contents .= formatInclude(A_LoopFilePath,2)
      }
    }
    contents := ToSection(contents, "MAIN_INCLUDES", 1)
    subMods := ""
    Loop Files, "*", "D" {
      If SubStr(A_LoopFileName, 1, 1) != "_" {
        minifest := GenPluginTree(A_LoopFilePath, false, , _lvl + 1)
        subMods .= formatInclude(minifest,3)
      }
    }
  } SetWorkingDir OldDir

  if subMods != "" {
    subMods := ToSection(subMods, "SUBMODULES", 2)
    if MakeSubmods {
      WriteManifest(PluginDir, "_submods.ahk", subMods, _lvl)
    }
    contents := subMods . contents
  }
  WriteManifest(PluginDir, Manifest, contents, _lvl)
  return  PluginDir . "\" . Manifest
}

WriteAutoGen(Path, Contents) {
  header := 
  (
    '; THIS FILE WAS AUTO-GENERATED BY AnimusHK-PluginTree.ahk
      ; MANUAL CHANGES MAY BE OVERWRITTEN
    #Requires AutoHotkey v2.0

    '
  )
  FileSafeDelete(Path) ; reset mainifest
  contents := contents.RTrim("`n")
  FileAppend header contents, Path
}

WriteManifest(Dir, FileName, Contents, level) {
  header :=
  (
    '  G_FILE_ENCODING         := A_FileEncoding
      G_MODE_SEND             := A_SendMode
      G_SENDLEVEL             := A_SendLevel
      
      G_MODE_COORD_CARET      := A_CoordModeCaret
      G_MODE_COORD_MENU       := A_CoordModeMenu
      G_MODE_COORD_MOUSE      := A_CoordModeMouse
      G_MODE_COORD_PIXEL      := A_CoordModePixel
      G_MODE_COORD_TOOLTIP    := A_CoordModeToolTip
      
      G_MODE_TITLEMATCH       := A_TitleMatchMode
      G_MODE_TITLEMATCHSPEED  := A_TitleMatchModeSpeed
      G_MODE_DETECTHIDDENWIN  := A_DetectHiddenWindows
      G_MODE_DETECTHIDDENTEXT := A_DetectHiddenText

      G_MODE_STORECAPS        := A_StoreCapsLockMode
      G_DELAY_CTRL            := A_ControlDelay
      G_DELAY_KEY             := A_KeyDelay
      G_DUR_KEY               := A_KeyDuration
      G_DELAY_PLAY_KEY        := A_KeyDelayPlay
      G_DUR_PLAY_KEY          := A_KeyDurationPlay
      G_DELAY_MOUSE           := A_MouseDelay
      G_DELAY_PLAY_MOUSE      := A_MouseDelayPlay
      G_SPEED_MOUSE           := A_DefaultMouseSpeed
      G_DELAY_WIN             := A_WinDelay

      G_REG_VIEW              := A_RegView
    '
  )

  footer := 
  (
    '  #HotIf      
      FileEncoding(G_FILE_ENCODING)
      SendMode(G_MODE_SEND)
      SendLevel(G_SENDLEVEL)

      CoordMode("Caret"  , G_MODE_COORD_CARET  )
      CoordMode("Menu"   , G_MODE_COORD_MENU   )
      CoordMode("Mouse"  , G_MODE_COORD_MOUSE  )
      CoordMode("Pixel"  , G_MODE_COORD_PIXEL  )
      CoordMode("ToolTip", G_MODE_COORD_TOOLTIP)

      SetTitleMatchMode(G_MODE_TITLEMATCHSPEED)
      SetTitleMatchMode(G_MODE_TITLEMATCH)
      DetectHiddenWindows(G_MODE_DETECTHIDDENWIN)
      DetectHiddenText(G_MODE_DETECTHIDDENTEXT)
      SetWinDelay(G_DELAY_WIN)

      SetStoreCapsLockMode(G_MODE_STORECAPS)
      SetControlDelay(G_DELAY_CTRL)
      SetKeyDelay(G_DELAY_KEY, G_DUR_KEY)
      SetKeyDelay(G_DELAY_PLAY_KEY, G_DUR_PLAY_KEY, "Play")
      SetMouseDelay(G_DELAY_MOUSE)
      SetMouseDelay(G_DELAY_PLAY_MOUSE, "Play")
      SetDefaultMouseSpeed(G_SPEED_MOUSE)

      SetRegView(G_REG_VIEW)
    '
  )
  FilePath := JoinPath(Dir, FileName)
  if level == 1 {
    header := ToSection(header, "RECORD_INITIAL_GLOBAL_STATE", 0, "Enforces module locality", "PLUGINS SHOULD NOT MODIFY THESE")
    footer := ToSection(footer, "RESTORE_GLOBAL_STATE", 0, "Enforces module locality", , , , , false)
    WriteAutoGen(FilePath, header contents footer)
  } else {
    WriteAutoGen(FilePath, contents)
  }
}

ManifestName(Dir, FileName := "") {
  if not FileName {
    SplitPath(Dir, &FileName)
    FileName := StrLower(FileName) ".ahk"
  }
  return "_" . FileName
}


SectionHeader(Name:="", Indent := 0, Extra?, SubNote:="", Padding := 6, IndentSize := 2, MaxWidth:=80, newln := true) {
  Name := Name.Upper().Trim().Replace(" ", "_") ; Normalize Section Name
  Indent := Indent * IndentSize                 ; Use Two space indentation
  if IsSet(Extra) {                              ; If Extra, ensure it's in brackets
    if !Extra.startsWith("[")
      Extra := "[" Extra
    if !Extra.endsWith("]")
      Extra .= "]"
  } else {
    Extra := ""
  }

  ; Cut Padding if string too long.
  if Padding >= MaxPad := (MaxWidth - (Name.Length + Extra.Length + Indent + 1)) // 2{
    Padding := MaxPad
  }
  ; If removing padding was not enough, decrease indent.
  if Padding <= 0 {                    
    Indent := Indent + (2 * (Padding-1)) - IndentSize
    Padding := 1
  }

  ; Indent, Make it a comment, and add edge padding
  pre := " ".Repeat(Indent) . ";" . Name.LPad("-", Padding)
  post := Extra.Rpad("-", Padding)           ; Add edge padding on right
  mid := "-".Repeat(MaxWidth - (pre.Length + post.Length))
  out := pre . mid . post
  ; Concat Name and Extra with -'s between, and newln
  if SubNote != "" {
    SubNote := SubNote.Trim().LRTrim("[", "]").LRPad("[", "]", 3) ; Ensure tripple brackets
    subIndent := (MaxWidth - (Indent + SubNote.Length + 1))//2    ; Find indent to center
    SubNote := " ".Repeat(Indent) ";" SubNote.Indent(subIndent)   ; indent and center
    out .= "`n" . SubNote                                        ; add as new line
  }
  if newln
    return out . "`n"
  return out
}

SectionFooter(Indent := 0, IndentSize := 2, MaxWidth := 80, newln := true) {
  Indent := Indent * IndentSize
  out := " ".Repeat(Indent) . ";" . "-".Repeat(MaxWidth - Indent - 1)
  if newln
    return out . "`n"
  return out
}

ToSection(Contents, Name := "", Indent := 0, Extra?, SubNote := "", Padding := 6, IndentSize := 2, MaxWidth := 80, newln := true) {
  return SectionHeader(Name, Indent, Extra?, SubNote, Padding, IndentSize, MaxWidth) . Contents . SectionFooter(Indent, IndentSize, MaxWidth, newln)
}